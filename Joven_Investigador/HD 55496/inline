{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3fd4eb4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook\n",
    "plt.figure(figsize=(8,7))\n",
    "plt.plot(λNuevo37,FNuevo37, '-',linewidth = 0.5, color='k') #color = colors[beging-k])\n",
    "plt.xlabel('$\\lambda~ [Å]$',fontsize = 12)\n",
    "plt.ylabel('$F_\\lambda~  [Normalizado]$' ,fontsize = 12)\n",
    "plt.title(\"Espectro\",fontsize = 14)\n",
    "plt.grid(linestyle='-', linewidth=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "159478f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from astropy.io import fits\n",
    "from glob import glob\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import csv\n",
    "from specutils import Spectrum1D, SpectralRegion\n",
    "import astropy.units as u\n",
    "from tqdm import tqdm\n",
    "from astropy.nddata import StdDevUncertainty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "02b6bbbe",
   "metadata": {},
   "outputs": [],
   "source": [
    "archivo_fits = fits.open('Rich-Stars-Table.fits') #open file\n",
    "imagen = archivo_fits[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "42283817",
   "metadata": {},
   "outputs": [],
   "source": [
    "type(imagen)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7baa5bda",
   "metadata": {},
   "outputs": [],
   "source": [
    "archivo_fits.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1ec409b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "header_imagen = imagen.header\n",
    "header_imagen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f9d469d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "tabla = archivo_fits[1].data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2a8edc71",
   "metadata": {},
   "outputs": [],
   "source": [
    "tabla.columns          # Objetos column\n",
    "#tabla.columns.names    # Nombres de las columnas\n",
    "#tabla.columns.info()   # informacion general"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ca607e15",
   "metadata": {},
   "outputs": [],
   "source": [
    "Tabla = pd.DataFrame(tabla)\n",
    "Tabla"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a6baaece",
   "metadata": {},
   "outputs": [],
   "source": [
    "Tabla.Vmag < 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e7cddfdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "Espectros = ['2022-02-06T05_23_26.977430-s-rich.sp.fits','2022-03-12T02_16_56.574455-s-rich.sp.fits','2022-03-18T01_02_08.612956-s-rich.sp.fits','2022-03-19T02_43_12.713594-s-rich.sp.fits','2022-03-20T01_13_27.761624-s-rich.sp.fits','2022-03-23T02_14_17.433945-s-rich.sp.fits','2022-03-26T02_41_37.929372-s-rich.sp.fits','2022-03-28T02_37_18.141363-s-rich.sp.fits']\n",
    "Espectros[4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b37750b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "srich1 = fits.open(Espectros[4])#('2022-02-06T05_23_26.977430-s-rich.sp.fits') #open file\n",
    "imagen1 = srich1[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "45aabd4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "srich1.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4f50762d",
   "metadata": {},
   "outputs": [],
   "source": [
    "header_imagen = imagen1.header\n",
    "header_imagen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6abb7f0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definir una función que aplica estilos a columnas específicas con colores diferentes\n",
    "def resaltar_columnas(s, colores):\n",
    "    return ['background-color: {}'.format(colores.get(col, '')) for col in s.index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e8775b2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "TablaRV = pd.DataFrame()\n",
    "RV = []\n",
    "RV_E = []\n",
    "SNR = []\n",
    "SNR_R = []\n",
    "AIRMASS = []\n",
    "\n",
    "for i in Espectros:\n",
    "    srich2 = fits.open(i)\n",
    "    RV.append(srich2[0].header['RV'])\n",
    "    RV_E.append(srich2[0].header['RV_E'])\n",
    "    SNR.append(srich2[0].header['SNR'])\n",
    "    SNR_R.append(srich2[0].header['SNR_R'])\n",
    "    AIRMASS.append(srich2[0].header['HIERARCH AIRMASS'])\n",
    "\n",
    "Fecha = [\"2022-02-06\",\"2022-03-12\",\"2022-03-18\",\"2022-03-19\",\"2022-03-20\",\"2022-03-23\",\"2022-03-26\",\"2022-03-28\"]\n",
    "Fecha_Juliana = [(fits.open(Espectros[0])[0].header['HIERARCH MJD']),(fits.open(Espectros[1])[0].header['HIERARCH MJD']),(fits.open(Espectros[2])[0].header['HIERARCH MJD']),(fits.open(Espectros[3])[0].header['HIERARCH MJD']),(fits.open(Espectros[4])[0].header['HIERARCH MJD']),(fits.open(Espectros[5])[0].header['HIERARCH MJD']),(fits.open(Espectros[6])[0].header['HIERARCH MJD']),(fits.open(Espectros[7])[0].header['HIERARCH MJD'])]\n",
    "\n",
    "print(np.around(Fecha_Juliana,2))\n",
    "TablaRV['Fecha Espectro'] = np.around(Fecha_Juliana,2)\n",
    "TablaRV['VR'] = RV\n",
    "TablaRV['VR Err'] = RV_E\n",
    "TablaRV['SNR'] = SNR\n",
    "TablaRV['SNR_R'] = SNR_R\n",
    "TablaRV['AIRMASS'] = AIRMASS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c7c695d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "TablaRV['VR']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5546aa02",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Especificar los colores para cada columna\n",
    "colores_resaltar = {'VR': '#b392ac', 'VR Err': '#d1b3c4', 'SNR': '#cce3de', 'SNR_R':'#a4c3b2', 'AIRMASS': '#6b9080'}\n",
    "\n",
    "# Aplicar estilos al DataFrame\n",
    "estilos = TablaRV.style.apply(lambda x: resaltar_columnas(x, colores_resaltar), axis=1)\n",
    "\n",
    "# Mostrar el DataFrame con los estilos aplicados\n",
    "estilos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e964cbe4",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(8,7))\n",
    "x = [-22,12,18,19,20,23,26,28]\n",
    "%notebook inline\n",
    "plt.errorbar(x, RV,  yerr = RV_E, linestyle=\"None\",  fmt=\"o\",  capsize=3,  ecolor=\"#4A235A\", mfc='#CACFD2',mec='#7D3C98', ms=6, mew=1)\n",
    "plt.xlabel('MJD',fontsize = 12)\n",
    "plt.ylabel('$VR \\pm Err $ [km/s]' ,fontsize = 12)\n",
    "plt.title('Velocidad radial',fontsize = 14)\n",
    "#plt.ylim(398.5,399.8)\n",
    "plt.xticks(x,  np.around(Fecha_Juliana,1), rotation=90)\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fe03af81",
   "metadata": {},
   "outputs": [],
   "source": [
    "asistencia = ['Espectro 1', 'Espectro 2', 'Espectro 3', 'Espectro 4', 'Espectro 5', 'Espectro 6','Espectro 7','Espectro 8']\n",
    "\n",
    "#Obtenemos la posicion de cada etiqueta en el eje de X\n",
    "x = np.arange(len(asistencia))\n",
    "#tamaño de cada barra\n",
    "width = 0.35\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(8,6))\n",
    "\n",
    "#Generamos las barras para el conjunto de hombres\n",
    "rects1 = ax.bar(x - width/2, SNR, width, label='SNR', color = '#cce3de')\n",
    "#Generamos las barras para el conjunto de mujeres\n",
    "rects2 = ax.bar(x + width/2, SNR_R, width, label='SNR_R', color = '#a4c3b2')\n",
    "\n",
    "#Añadimos las etiquetas de identificacion de valores en el grafico\n",
    "ax.set_ylabel('Señal Ruido')\n",
    "ax.set_title('Señal Ruido de cada Espectro')\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(asistencia)\n",
    "#Añadimos un legen() esto permite mmostrar con colores a que pertence cada valor.\n",
    "ax.legend()\n",
    "\n",
    "def autolabel(rects):\n",
    "    \"\"\"Funcion para agregar una etiqueta con el valor en cada barra\"\"\"\n",
    "    for rect in rects:\n",
    "        height = rect.get_height()\n",
    "        ax.annotate('{}'.format(height),\n",
    "                    xy=(rect.get_x() + rect.get_width() / 2, height),\n",
    "                    xytext=(0, 3),  # 3 points vertical offset\n",
    "                    textcoords=\"offset points\",\n",
    "                    ha='center', va='bottom')\n",
    "\n",
    "#Añadimos las etiquetas para cada barra\n",
    "autolabel(rects1)\n",
    "autolabel(rects2)\n",
    "fig.tight_layout()\n",
    "#Mostramos la grafica con el metodo show()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
