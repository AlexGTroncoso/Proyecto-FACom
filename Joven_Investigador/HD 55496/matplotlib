{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8e1b5c1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from astropy.io import fits\n",
    "from glob import glob\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import csv\n",
    "from specutils import Spectrum1D, SpectralRegion\n",
    "import astropy.units as u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "584ed9b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "archivo_fits = fits.open('Rich-Stars-Table.fits') #open file\n",
    "imagen = archivo_fits[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1be1d781",
   "metadata": {},
   "outputs": [],
   "source": [
    "type(imagen)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "91a61358",
   "metadata": {},
   "outputs": [],
   "source": [
    "archivo_fits.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "516958e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "header_imagen = imagen.header\n",
    "header_imagen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f5488bdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "tabla = archivo_fits[1].data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e79a53e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "tabla.columns          # Objetos column\n",
    "#tabla.columns.names    # Nombres de las columnas\n",
    "#tabla.columns.info()   # informacion general"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "404fcf8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "Tabla = pd.DataFrame(tabla)\n",
    "Tabla"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "746a9c92",
   "metadata": {},
   "outputs": [],
   "source": [
    "Tabla.Vmag < 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9be3c045",
   "metadata": {},
   "outputs": [],
   "source": [
    "Espectros = ['2022-02-06T05_23_26.977430-s-rich.sp.fits','2022-03-12T02_16_56.574455-s-rich.sp.fits','2022-03-18T01_02_08.612956-s-rich.sp.fits','2022-03-19T02_43_12.713594-s-rich.sp.fits','2022-03-20T01_13_27.761624-s-rich.sp.fits','2022-03-23T02_14_17.433945-s-rich.sp.fits','2022-03-26T02_41_37.929372-s-rich.sp.fits','2022-03-28T02_37_18.141363-s-rich.sp.fits']\n",
    "Espectros[4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "43e1173d",
   "metadata": {},
   "outputs": [],
   "source": [
    "srich1 = fits.open(Espectros[5])#('2022-02-06T05_23_26.977430-s-rich.sp.fits') #open file\n",
    "imagen1 = srich1[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3a41ed9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "srich1.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "dbc2bb2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "header_imagen = imagen1.header\n",
    "header_imagen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "01c3c130",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definir una función que aplica estilos a columnas específicas con colores diferentes\n",
    "def resaltar_columnas(s, colores):\n",
    "    return ['background-color: {}'.format(colores.get(col, '')) for col in s.index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4dc18312",
   "metadata": {},
   "outputs": [],
   "source": [
    "TablaRV = pd.DataFrame()\n",
    "RV = []\n",
    "RV_E = []\n",
    "SNR = []\n",
    "SNR_R = []\n",
    "AIRMASS = []\n",
    "\n",
    "for i in Espectros:\n",
    "    srich2 = fits.open(i)\n",
    "    RV.append(srich2[0].header['RV'])\n",
    "    RV_E.append(srich2[0].header['RV_E'])\n",
    "    SNR.append(srich2[0].header['SNR'])\n",
    "    SNR_R.append(srich2[0].header['SNR_R'])\n",
    "    AIRMASS.append(srich2[0].header['HIERARCH AIRMASS'])\n",
    "\n",
    "Fecha = [\"2022-02-06\",\"2022-03-12\",\"2022-03-18\",\"2022-03-19\",\"2022-03-20\",\"2022-03-23\",\"2022-03-26\",\"2022-03-28\"]\n",
    "Fecha_Juliana = [(fits.open(Espectros[0])[0].header['HIERARCH MJD']),(fits.open(Espectros[1])[0].header['HIERARCH MJD']),(fits.open(Espectros[2])[0].header['HIERARCH MJD']),(fits.open(Espectros[3])[0].header['HIERARCH MJD']),(fits.open(Espectros[4])[0].header['HIERARCH MJD']),(fits.open(Espectros[5])[0].header['HIERARCH MJD']),(fits.open(Espectros[6])[0].header['HIERARCH MJD']),(fits.open(Espectros[7])[0].header['HIERARCH MJD'])]\n",
    "\n",
    "print(np.around(Fecha_Juliana,2))\n",
    "TablaRV['Fecha Espectro'] = np.around(Fecha_Juliana,2)\n",
    "TablaRV['VR'] = RV\n",
    "TablaRV['VR Err'] = RV_E\n",
    "TablaRV['SNR'] = SNR\n",
    "TablaRV['SNR_R'] = SNR_R\n",
    "TablaRV['AIRMASS'] = AIRMASS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "08104a48",
   "metadata": {},
   "outputs": [],
   "source": [
    "TablaRV['VR']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4c418e8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Especificar los colores para cada columna\n",
    "colores_resaltar = {'VR': '#b392ac', 'VR Err': '#d1b3c4', 'SNR': '#cce3de', 'SNR_R':'#a4c3b2', 'AIRMASS': '#6b9080'}\n",
    "\n",
    "# Aplicar estilos al DataFrame\n",
    "estilos = TablaRV.style.apply(lambda x: resaltar_columnas(x, colores_resaltar), axis=1)\n",
    "\n",
    "# Mostrar el DataFrame con los estilos aplicados\n",
    "estilos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "915224d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(8,7))\n",
    "x = [-22,12,18,19,20,23,26,28]\n",
    "%notebook inline\n",
    "plt.errorbar(x, RV,  yerr = RV_E, linestyle=\"None\",  fmt=\"o\",  capsize=3,  ecolor=\"#4A235A\", mfc='#CACFD2',mec='#7D3C98', ms=6, mew=1)\n",
    "plt.xlabel('MJD',fontsize = 12)\n",
    "plt.ylabel('$VR \\pm Err $ [km/s]' ,fontsize = 12)\n",
    "plt.title('Velocidad radial',fontsize = 14)\n",
    "#plt.ylim(398.5,399.8)\n",
    "plt.xticks(x,  np.around(Fecha_Juliana,1), rotation=90)\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f5edcfef",
   "metadata": {},
   "outputs": [],
   "source": [
    "asistencia = ['Espectro 1', 'Espectro 2', 'Espectro 3', 'Espectro 4', 'Espectro 5', 'Espectro 6','Espectro 7','Espectro 8']\n",
    "\n",
    "#Obtenemos la posicion de cada etiqueta en el eje de X\n",
    "x = np.arange(len(asistencia))\n",
    "#tamaño de cada barra\n",
    "width = 0.35\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(8,6))\n",
    "\n",
    "#Generamos las barras para el conjunto de hombres\n",
    "rects1 = ax.bar(x - width/2, SNR, width, label='SNR', color = '#cce3de')\n",
    "#Generamos las barras para el conjunto de mujeres\n",
    "rects2 = ax.bar(x + width/2, SNR_R, width, label='SNR_R', color = '#a4c3b2')\n",
    "\n",
    "#Añadimos las etiquetas de identificacion de valores en el grafico\n",
    "ax.set_ylabel('Señal Ruido')\n",
    "ax.set_title('Señal Ruido de cada Espectro')\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(asistencia)\n",
    "#Añadimos un legen() esto permite mmostrar con colores a que pertence cada valor.\n",
    "ax.legend()\n",
    "\n",
    "def autolabel(rects):\n",
    "    \"\"\"Funcion para agregar una etiqueta con el valor en cada barra\"\"\"\n",
    "    for rect in rects:\n",
    "        height = rect.get_height()\n",
    "        ax.annotate('{}'.format(height),\n",
    "                    xy=(rect.get_x() + rect.get_width() / 2, height),\n",
    "                    xytext=(0, 3),  # 3 points vertical offset\n",
    "                    textcoords=\"offset points\",\n",
    "                    ha='center', va='bottom')\n",
    "\n",
    "#Añadimos las etiquetas para cada barra\n",
    "autolabel(rects1)\n",
    "autolabel(rects2)\n",
    "fig.tight_layout()\n",
    "#Mostramos la grafica con el metodo show()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "aa02f0b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "tabla1 = srich1[0].data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c078329c",
   "metadata": {},
   "outputs": [],
   "source": [
    "tabla1 = srich1[0].data\n",
    "Tabla = pd.DataFrame(tabla1[5])\n",
    "Tabla"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7be8beab",
   "metadata": {},
   "outputs": [],
   "source": [
    "Wavelength = pd.DataFrame(tabla1[0])\n",
    "Flux = pd.DataFrame(tabla1[5])\n",
    "Error = pd.DataFrame(tabla1[6])\n",
    "F = []\n",
    "λ = []\n",
    "Err = []\n",
    "\n",
    "for j in range(38,-1,-1):\n",
    "    for i in range(2048):\n",
    "        λ.append(Wavelength[i][j])\n",
    "        F.append(Flux[i][j])\n",
    "        Err.append(Error[i][j])\n",
    "    \n",
    "Datos = λ,F,Err"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "01868ff8",
   "metadata": {},
   "outputs": [],
   "source": [
    "tabla1 = srich1[0].data\n",
    "Tabla = pd.DataFrame(tabla1[0])\n",
    "Tabla"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1360c18e",
   "metadata": {},
   "outputs": [],
   "source": [
    "Wavelength = pd.DataFrame(tabla1[0])\n",
    "Flux = pd.DataFrame(tabla1[5])\n",
    "Error = pd.DataFrame(tabla1[6])\n",
    "F = []\n",
    "λ = []\n",
    "Err = []\n",
    "\n",
    "for j in range(38,-1,-1):\n",
    "    for i in range(2048):\n",
    "        λ.append(Wavelength[i][j])\n",
    "        F.append(Flux[i][j])\n",
    "        Err.append(Error[i][j])\n",
    "    \n",
    "Datos = λ,F,Err"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "51375105",
   "metadata": {},
   "outputs": [],
   "source": [
    "Wavelength.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "fe9a5894",
   "metadata": {},
   "outputs": [],
   "source": [
    "λ[0],F[0],Err[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "55377c54",
   "metadata": {},
   "outputs": [],
   "source": [
    "Tabla1 = pd.DataFrame()\n",
    "Tabla1['Wavelength'] = λ\n",
    "Tabla1['Norm Flux'] = F\n",
    "Tabla1['Err Norm Flux'] = Err"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "37207cdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(8,7))\n",
    "plt.plot(Tabla1['Wavelength'],Tabla1['Norm Flux'], '-',linewidth = 1)\n",
    "\n",
    "plt.xlabel('$\\lambda~ [Å]$',fontsize = 12)\n",
    "plt.ylabel('$F_\\lambda~  [Normalizado]$' ,fontsize = 12)\n",
    "plt.title(\"Espectro\",fontsize = 14)\n",
    "#plt.xlim(4000,4450)\n",
    "plt.grid(linestyle='-', linewidth=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "45778deb",
   "metadata": {},
   "outputs": [],
   "source": [
    "beging = 38\n",
    "\n",
    "FGeneral = [[] for _ in range(beging+1)]\n",
    "λGeneral = [[] for _ in range(beging+1)]\n",
    "ErrGeneral = [[] for _ in range(beging+1)]\n",
    "\n",
    "\n",
    "for i in range(2048):\n",
    "    for j in range(beging):\n",
    "        FGeneral[j].append(Flux[i][beging-j])\n",
    "        λGeneral[j].append(Wavelength[i][beging-j])\n",
    "        ErrGeneral[j].append(Error[i][beging-j])\n",
    "\n",
    "        FGeneral[38].append(Flux[i][0])\n",
    "        λGeneral[38].append(Wavelength[i][0])\n",
    "        ErrGeneral[38].append(Error[i][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "77b7757d",
   "metadata": {},
   "outputs": [],
   "source": [
    "cmap = plt.get_cmap('Spectral')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 39)]\n",
    "plt.figure(figsize=(8,7))\n",
    "\n",
    "for k in range(39):\n",
    "    plt.plot(λGeneral[k],FGeneral[k], '-',linewidth = 1) #color = colors[beging-k])\n",
    "    \n",
    "plt.xlabel('$\\lambda~ [Å]$',fontsize = 12)\n",
    "plt.ylabel('$F_\\lambda~  [Normalizado]$' ,fontsize = 12)\n",
    "plt.title(\"Espectro\",fontsize = 14)\n",
    "plt.grid(linestyle='-', linewidth=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b0cff721",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "plt.figure(figsize=(8,7))\n",
    "plt.plot(λGeneral[0],FGeneral[0], '-',linewidth = 1) #color = colors[beging-k])\n",
    "plt.plot(λGeneral[1],FGeneral[1], '-',linewidth = 1) #color = colors[beging-k])\n",
    "plt.plot(λGeneral[2],FGeneral[2], '-',linewidth = 1) #color = colors[beging-k])\n",
    "plt.plot(λGeneral[3],FGeneral[3], '-',linewidth = 1) #color = colors[beging-k])\n",
    "plt.xlabel('$\\lambda~ [Å]$',fontsize = 12)\n",
    "plt.ylabel('$F_\\lambda~  [Normalizado]$' ,fontsize = 12)\n",
    "plt.title(\"Espectro\",fontsize = 14)\n",
    "plt.grid(linestyle='-', linewidth=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ab6ca165",
   "metadata": {},
   "outputs": [],
   "source": [
    "λInter0 = []\n",
    "for i in λGeneral[0]:\n",
    "    if (i >= λGeneral[1][0]):\n",
    "        λInter0.append(i)\n",
    "Mean0 = np.mean(λInter0)\n",
    "\n",
    "\n",
    "λNuevo = []\n",
    "FNuevo = []\n",
    "for i,j in zip(λGeneral[0],FGeneral[0]):\n",
    "    if (i <= Mean0):\n",
    "        λNuevo.append(i)\n",
    "        FNuevo.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[1],FGeneral[1]):\n",
    "    if (i >= Mean0):\n",
    "        λNuevo.append(i)\n",
    "        FNuevo.append(j)\n",
    "\n",
    "##########\n",
    "\n",
    "λInter1 = []\n",
    "for i in λGeneral[1]:\n",
    "    if (i >= λGeneral[2][0]):\n",
    "        λInter1.append(i)\n",
    "Mean1 = np.mean(λInter1)\n",
    "\n",
    "λNuevo1 = []\n",
    "FNuevo1 = []\n",
    "for i,j in zip(λNuevo,FNuevo):\n",
    "    if (i <= Mean1):\n",
    "        λNuevo1.append(i)\n",
    "        FNuevo1.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[2],FGeneral[2]):\n",
    "    if (i >= Mean1):\n",
    "        λNuevo1.append(i)\n",
    "        FNuevo1.append(j)\n",
    "        \n",
    "##########\n",
    "\n",
    "λInter2 = []\n",
    "for i in λGeneral[2]:\n",
    "    if (i >= λGeneral[3][0]):\n",
    "        λInter2.append(i)\n",
    "Mean2 = np.mean(λInter2)\n",
    "\n",
    "λNuevo2 = []\n",
    "FNuevo2 = []\n",
    "for i,j in zip(λNuevo1,FNuevo1):\n",
    "    if (i <= Mean2):\n",
    "        λNuevo2.append(i)\n",
    "        FNuevo2.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[3],FGeneral[3]):\n",
    "    if (i >= Mean2):\n",
    "        λNuevo2.append(i)\n",
    "        FNuevo2.append(j)\n",
    "        \n",
    "##########\n",
    "\n",
    "λInter3 = []\n",
    "for i in λGeneral[3]:\n",
    "    if (i >= λGeneral[4][0]):\n",
    "        λInter3.append(i)\n",
    "Mean3 = np.mean(λInter3)\n",
    "\n",
    "λNuevo3 = []\n",
    "FNuevo3 = []\n",
    "for i,j in zip(λNuevo2,FNuevo2):\n",
    "    if (i <= Mean3):\n",
    "        λNuevo3.append(i)\n",
    "        FNuevo3.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[4],FGeneral[4]):\n",
    "    if (i >= Mean3):\n",
    "        λNuevo3.append(i)\n",
    "        FNuevo3.append(j)\n",
    "        \n",
    "        \n",
    "##########\n",
    "\n",
    "λInter4 = []\n",
    "for i in λGeneral[4]:\n",
    "    if (i >= λGeneral[5][0]):\n",
    "        λInter4.append(i)\n",
    "Mean4 = np.mean(λInter4)\n",
    "\n",
    "λNuevo4 = []\n",
    "FNuevo4 = []\n",
    "for i,j in zip(λNuevo3,FNuevo3):\n",
    "    if (i <= Mean4):\n",
    "        λNuevo4.append(i)\n",
    "        FNuevo4.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[5],FGeneral[5]):\n",
    "    if (i >= Mean4):\n",
    "        λNuevo4.append(i)\n",
    "        FNuevo4.append(j)\n",
    "\n",
    "                \n",
    "##########\n",
    "\n",
    "λInter5 = []\n",
    "for i in λGeneral[5]:\n",
    "    if (i >= λGeneral[6][0]):\n",
    "        λInter5.append(i)\n",
    "Mean5 = np.mean(λInter5)\n",
    "\n",
    "λNuevo5 = []\n",
    "FNuevo5 = []\n",
    "for i,j in zip(λNuevo4,FNuevo4):\n",
    "    if (i <= Mean5):\n",
    "        λNuevo5.append(i)\n",
    "        FNuevo5.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[6],FGeneral[6]):\n",
    "    if (i >= Mean5):\n",
    "        λNuevo5.append(i)\n",
    "        FNuevo5.append(j)\n",
    "\n",
    "        \n",
    "        ##########\n",
    "\n",
    "λInter6 = []\n",
    "for i in λGeneral[6]:\n",
    "    if (i >= λGeneral[7][0]):\n",
    "        λInter6.append(i)\n",
    "Mean6 = np.mean(λInter6)\n",
    "\n",
    "λNuevo6 = []\n",
    "FNuevo6 = []\n",
    "for i,j in zip(λNuevo5,FNuevo5):\n",
    "    if (i <= Mean6):\n",
    "        λNuevo6.append(i)\n",
    "        FNuevo6.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[7],FGeneral[7]):\n",
    "    if (i >= Mean6):\n",
    "        λNuevo6.append(i)\n",
    "        FNuevo6.append(j)\n",
    "        \n",
    "        ##########\n",
    "\n",
    "λInter7 = []\n",
    "for i in λGeneral[7]:\n",
    "    if (i >= λGeneral[8][0]):\n",
    "        λInter7.append(i)\n",
    "Mean7 = np.mean(λInter7)\n",
    "\n",
    "λNuevo7 = []\n",
    "FNuevo7 = []\n",
    "for i,j in zip(λNuevo6,FNuevo6):\n",
    "    if (i <= Mean7):\n",
    "        λNuevo7.append(i)\n",
    "        FNuevo7.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[8],FGeneral[8]):\n",
    "    if (i >= Mean7):\n",
    "        λNuevo7.append(i)\n",
    "        FNuevo7.append(j)\n",
    "\n",
    "                ##########\n",
    "\n",
    "λInter8 = []\n",
    "for i in λGeneral[8]:\n",
    "    if (i >= λGeneral[9][0]):\n",
    "        λInter8.append(i)\n",
    "Mean8 = np.mean(λInter8)\n",
    "\n",
    "λNuevo8 = []\n",
    "FNuevo8 = []\n",
    "for i,j in zip(λNuevo7,FNuevo7):\n",
    "    if (i <= Mean8):\n",
    "        λNuevo8.append(i)\n",
    "        FNuevo8.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[9],FGeneral[9]):\n",
    "    if (i >= Mean8):\n",
    "        λNuevo8.append(i)\n",
    "        FNuevo8.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter9 = []\n",
    "for i in λGeneral[9]:\n",
    "    if (i >= λGeneral[10][0]):\n",
    "        λInter9.append(i)\n",
    "Mean9 = np.mean(λInter9)\n",
    "\n",
    "λNuevo9 = []\n",
    "FNuevo9 = []\n",
    "for i,j in zip(λNuevo8,FNuevo8):\n",
    "    if (i <= Mean9):\n",
    "        λNuevo9.append(i)\n",
    "        FNuevo9.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[10],FGeneral[10]):\n",
    "    if (i >= Mean9):\n",
    "        λNuevo9.append(i)\n",
    "        FNuevo9.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter10 = []\n",
    "for i in λGeneral[10]:\n",
    "    if (i >= λGeneral[11][0]):\n",
    "        λInter10.append(i)\n",
    "Mean10 = np.mean(λInter10)\n",
    "\n",
    "λNuevo10 = []\n",
    "FNuevo10 = []\n",
    "for i,j in zip(λNuevo9,FNuevo9):\n",
    "    if (i <= Mean10):\n",
    "        λNuevo10.append(i)\n",
    "        FNuevo10.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[11],FGeneral[11]):\n",
    "    if (i >= Mean10):\n",
    "        λNuevo10.append(i)\n",
    "        FNuevo10.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter11 = []\n",
    "for i in λGeneral[11]:\n",
    "    if (i >= λGeneral[12][0]):\n",
    "        λInter11.append(i)\n",
    "Mean11 = np.mean(λInter11)\n",
    "\n",
    "λNuevo11 = []\n",
    "FNuevo11 = []\n",
    "for i,j in zip(λNuevo10,FNuevo10):\n",
    "    if (i <= Mean11):\n",
    "        λNuevo11.append(i)\n",
    "        FNuevo11.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[12],FGeneral[12]):\n",
    "    if (i >= Mean11):\n",
    "        λNuevo11.append(i)\n",
    "        FNuevo11.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter12 = []\n",
    "for i in λGeneral[12]:\n",
    "    if (i >= λGeneral[13][0]):\n",
    "        λInter12.append(i)\n",
    "Mean12 = np.mean(λInter12)\n",
    "\n",
    "λNuevo12 = []\n",
    "FNuevo12 = []\n",
    "for i,j in zip(λNuevo11,FNuevo11):\n",
    "    if (i <= Mean12):\n",
    "        λNuevo12.append(i)\n",
    "        FNuevo12.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[13],FGeneral[13]):\n",
    "    if (i >= Mean12):\n",
    "        λNuevo12.append(i)\n",
    "        FNuevo12.append(j)\n",
    "\n",
    "                ##########\n",
    "\n",
    "λInter13 = []\n",
    "for i in λGeneral[13]:\n",
    "    if (i >= λGeneral[14][0]):\n",
    "        λInter13.append(i)\n",
    "Mean13 = np.mean(λInter13)\n",
    "\n",
    "λNuevo13 = []\n",
    "FNuevo13 = []\n",
    "for i,j in zip(λNuevo12,FNuevo12):\n",
    "    if (i <= Mean13):\n",
    "        λNuevo13.append(i)\n",
    "        FNuevo13.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[14],FGeneral[14]):\n",
    "    if (i >= Mean13):\n",
    "        λNuevo13.append(i)\n",
    "        FNuevo13.append(j)\n",
    "\n",
    "                ##########\n",
    "\n",
    "λInter14 = []\n",
    "for i in λGeneral[14]:\n",
    "    if (i >= λGeneral[15][0]):\n",
    "        λInter14.append(i)\n",
    "Mean14 = np.mean(λInter14)\n",
    "\n",
    "λNuevo14 = []\n",
    "FNuevo14 = []\n",
    "for i,j in zip(λNuevo13,FNuevo13):\n",
    "    if (i <= Mean14):\n",
    "        λNuevo14.append(i)\n",
    "        FNuevo14.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[15],FGeneral[15]):\n",
    "    if (i >= Mean14):\n",
    "        λNuevo14.append(i)\n",
    "        FNuevo14.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter15 = []\n",
    "for i in λGeneral[15]:\n",
    "    if (i >= λGeneral[16][0]):\n",
    "        λInter15.append(i)\n",
    "Mean15 = np.mean(λInter15)\n",
    "\n",
    "λNuevo15 = []\n",
    "FNuevo15 = []\n",
    "for i,j in zip(λNuevo14,FNuevo14):\n",
    "    if (i <= Mean15):\n",
    "        λNuevo15.append(i)\n",
    "        FNuevo15.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[16],FGeneral[16]):\n",
    "    if (i >= Mean15):\n",
    "        λNuevo15.append(i)\n",
    "        FNuevo15.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter16 = []\n",
    "for i in λGeneral[16]:\n",
    "    if (i >= λGeneral[17][0]):\n",
    "        λInter16.append(i)\n",
    "Mean16 = np.mean(λInter16)\n",
    "\n",
    "λNuevo16 = []\n",
    "FNuevo16 = []\n",
    "for i,j in zip(λNuevo15,FNuevo15):\n",
    "    if (i <= Mean16):\n",
    "        λNuevo16.append(i)\n",
    "        FNuevo16.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[17],FGeneral[17]):\n",
    "    if (i >= Mean16):\n",
    "        λNuevo16.append(i)\n",
    "        FNuevo16.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter17 = []\n",
    "for i in λGeneral[17]:\n",
    "    if (i >= λGeneral[18][0]):\n",
    "        λInter17.append(i)\n",
    "Mean17 = np.mean(λInter17)\n",
    "\n",
    "λNuevo17 = []\n",
    "FNuevo17 = []\n",
    "for i,j in zip(λNuevo16,FNuevo16):\n",
    "    if (i <= Mean17):\n",
    "        λNuevo17.append(i)\n",
    "        FNuevo17.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[18],FGeneral[18]):\n",
    "    if (i >= Mean17):\n",
    "        λNuevo17.append(i)\n",
    "        FNuevo17.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter18 = []\n",
    "for i in λGeneral[18]:\n",
    "    if (i >= λGeneral[19][0]):\n",
    "        λInter18.append(i)\n",
    "Mean18 = np.mean(λInter18)\n",
    "\n",
    "λNuevo18 = []\n",
    "FNuevo18 = []\n",
    "for i,j in zip(λNuevo17,FNuevo17):\n",
    "    if (i <= Mean18):\n",
    "        λNuevo18.append(i)\n",
    "        FNuevo18.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[19],FGeneral[19]):\n",
    "    if (i >= Mean18):\n",
    "        λNuevo18.append(i)\n",
    "        FNuevo18.append(j)\n",
    "    \n",
    "                ##########\n",
    "\n",
    "λInter19 = []\n",
    "for i in λGeneral[19]:\n",
    "    if (i >= λGeneral[20][0]):\n",
    "        λInter19.append(i)\n",
    "Mean19 = np.mean(λInter19)\n",
    "\n",
    "λNuevo19 = []\n",
    "FNuevo19 = []\n",
    "for i,j in zip(λNuevo18,FNuevo18):\n",
    "    if (i <= Mean19):\n",
    "        λNuevo19.append(i)\n",
    "        FNuevo19.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[20],FGeneral[20]):\n",
    "    if (i >= Mean19):\n",
    "        λNuevo19.append(i)\n",
    "        FNuevo19.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter20 = []\n",
    "for i in λGeneral[20]:\n",
    "    if (i >= λGeneral[21][0]):\n",
    "        λInter20.append(i)\n",
    "Mean20 = np.mean(λInter20)\n",
    "\n",
    "λNuevo20 = []\n",
    "FNuevo20 = []\n",
    "for i,j in zip(λNuevo19,FNuevo19):\n",
    "    if (i <= Mean20):\n",
    "        λNuevo20.append(i)\n",
    "        FNuevo20.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[21],FGeneral[21]):\n",
    "    if (i >= Mean20):\n",
    "        λNuevo20.append(i)\n",
    "        FNuevo20.append(j)\n",
    "    \n",
    "                ##########\n",
    "\n",
    "λInter21 = []\n",
    "for i in λGeneral[21]:\n",
    "    if (i >= λGeneral[22][0]):\n",
    "        λInter21.append(i)\n",
    "Mean21 = np.mean(λInter21)\n",
    "\n",
    "λNuevo21 = []\n",
    "FNuevo21 = []\n",
    "for i,j in zip(λNuevo20,FNuevo20):\n",
    "    if (i <= Mean21):\n",
    "        λNuevo21.append(i)\n",
    "        FNuevo21.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[22],FGeneral[22]):\n",
    "    if (i >= Mean21):\n",
    "        λNuevo21.append(i)\n",
    "        FNuevo21.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter22 = []\n",
    "for i in λGeneral[22]:\n",
    "    if (i >= λGeneral[23][0]):\n",
    "        λInter22.append(i)\n",
    "Mean22 = np.mean(λInter22)\n",
    "\n",
    "λNuevo22 = []\n",
    "FNuevo22 = []\n",
    "for i,j in zip(λNuevo21,FNuevo21):\n",
    "    if (i <= Mean22):\n",
    "        λNuevo22.append(i)\n",
    "        FNuevo22.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[23],FGeneral[23]):\n",
    "    if (i >= Mean22):\n",
    "        λNuevo22.append(i)\n",
    "        FNuevo22.append(j)\n",
    "    \n",
    "                ##########\n",
    "\n",
    "λInter23 = []\n",
    "for i in λGeneral[23]:\n",
    "    if (i >= λGeneral[24][0]):\n",
    "        λInter23.append(i)\n",
    "Mean23 = np.mean(λInter23)\n",
    "\n",
    "λNuevo23 = []\n",
    "FNuevo23 = []\n",
    "for i,j in zip(λNuevo22,FNuevo22):\n",
    "    if (i <= Mean23):\n",
    "        λNuevo23.append(i)\n",
    "        FNuevo23.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[24],FGeneral[24]):\n",
    "    if (i >= Mean23):\n",
    "        λNuevo23.append(i)\n",
    "        FNuevo23.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter24 = []\n",
    "for i in λGeneral[24]:\n",
    "    if (i >= λGeneral[25][0]):\n",
    "        λInter24.append(i)\n",
    "Mean24 = np.mean(λInter24)\n",
    "\n",
    "λNuevo24 = []\n",
    "FNuevo24 = []\n",
    "for i,j in zip(λNuevo23,FNuevo23):\n",
    "    if (i <= Mean24):\n",
    "        λNuevo24.append(i)\n",
    "        FNuevo24.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[25],FGeneral[25]):\n",
    "    if (i >= Mean24):\n",
    "        λNuevo24.append(i)\n",
    "        FNuevo24.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter25 = []\n",
    "for i in λGeneral[25]:\n",
    "    if (i >= λGeneral[26][0]):\n",
    "        λInter25.append(i)\n",
    "Mean25 = np.mean(λInter25)\n",
    "\n",
    "λNuevo25 = []\n",
    "FNuevo25 = []\n",
    "for i,j in zip(λNuevo24,FNuevo24):\n",
    "    if (i <= Mean25):\n",
    "        λNuevo25.append(i)\n",
    "        FNuevo25.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[26],FGeneral[26]):\n",
    "    if (i >= Mean25):\n",
    "        λNuevo25.append(i)\n",
    "        FNuevo25.append(j)\n",
    "\n",
    "                ##########\n",
    "\n",
    "λInter26 = []\n",
    "for i in λGeneral[26]:\n",
    "    if (i >= λGeneral[27][0]):\n",
    "        λInter26.append(i)\n",
    "Mean26 = np.mean(λInter26)\n",
    "\n",
    "λNuevo26 = []\n",
    "FNuevo26 = []\n",
    "for i,j in zip(λNuevo25,FNuevo25):\n",
    "    if (i <= Mean26):\n",
    "        λNuevo26.append(i)\n",
    "        FNuevo26.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[27],FGeneral[27]):\n",
    "    if (i >= Mean26):\n",
    "        λNuevo26.append(i)\n",
    "        FNuevo26.append(j)\n",
    "\n",
    "                ##########\n",
    "\n",
    "λInter27 = []\n",
    "for i in λGeneral[27]:\n",
    "    if (i >= λGeneral[28][0]):\n",
    "        λInter27.append(i)\n",
    "Mean27 = np.mean(λInter27)\n",
    "\n",
    "λNuevo27 = []\n",
    "FNuevo27 = []\n",
    "for i,j in zip(λNuevo26,FNuevo26):\n",
    "    if (i <= Mean27):\n",
    "        λNuevo27.append(i)\n",
    "        FNuevo27.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[28],FGeneral[28]):\n",
    "    if (i >= Mean27):\n",
    "        λNuevo27.append(i)\n",
    "        FNuevo27.append(j)\n",
    "    \n",
    "                ##########\n",
    "\n",
    "λInter28 = []\n",
    "for i in λGeneral[28]:\n",
    "    if (i >= λGeneral[29][0]):\n",
    "        λInter28.append(i)\n",
    "Mean28 = np.mean(λInter28)\n",
    "\n",
    "λNuevo28 = []\n",
    "FNuevo28 = []\n",
    "for i,j in zip(λNuevo27,FNuevo27):\n",
    "    if (i <= Mean28):\n",
    "        λNuevo28.append(i)\n",
    "        FNuevo28.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[29],FGeneral[29]):\n",
    "    if (i >= Mean28):\n",
    "        λNuevo28.append(i)\n",
    "        FNuevo28.append(j)\n",
    "\n",
    "                ##########\n",
    "\n",
    "λInter29 = []\n",
    "for i in λGeneral[29]:\n",
    "    if (i >= λGeneral[30][0]):\n",
    "        λInter29.append(i)\n",
    "Mean29 = np.mean(λInter29)\n",
    "\n",
    "λNuevo29 = []\n",
    "FNuevo29 = []\n",
    "for i,j in zip(λNuevo28,FNuevo28):\n",
    "    if (i <= Mean29):\n",
    "        λNuevo29.append(i)\n",
    "        FNuevo29.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[30],FGeneral[30]):\n",
    "    if (i >= Mean29):\n",
    "        λNuevo29.append(i)\n",
    "        FNuevo29.append(j)\n",
    "\n",
    "                ##########\n",
    "\n",
    "λInter30 = []\n",
    "for i in λGeneral[30]:\n",
    "    if (i >= λGeneral[31][0]):\n",
    "        λInter30.append(i)\n",
    "Mean30 = np.mean(λInter30)\n",
    "\n",
    "λNuevo30 = []\n",
    "FNuevo30 = []\n",
    "for i,j in zip(λNuevo29,FNuevo29):\n",
    "    if (i <= Mean30):\n",
    "        λNuevo30.append(i)\n",
    "        FNuevo30.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[31],FGeneral[31]):\n",
    "    if (i >= Mean30):\n",
    "        λNuevo30.append(i)\n",
    "        FNuevo30.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter31 = []\n",
    "for i in λGeneral[31]:\n",
    "    if (i >= λGeneral[32][0]):\n",
    "        λInter31.append(i)\n",
    "Mean31 = np.mean(λInter31)\n",
    "\n",
    "λNuevo31 = []\n",
    "FNuevo31 = []\n",
    "for i,j in zip(λNuevo30,FNuevo30):\n",
    "    if (i <= Mean31):\n",
    "        λNuevo31.append(i)\n",
    "        FNuevo31.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[32],FGeneral[32]):\n",
    "    if (i >= Mean31):\n",
    "        λNuevo31.append(i)\n",
    "        FNuevo31.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter32 = []\n",
    "for i in λGeneral[32]:\n",
    "    if (i >= λGeneral[33][0]):\n",
    "        λInter32.append(i)\n",
    "Mean32 = np.mean(λInter32)\n",
    "\n",
    "λNuevo32 = []\n",
    "FNuevo32 = []\n",
    "for i,j in zip(λNuevo31,FNuevo31):\n",
    "    if (i <= Mean32):\n",
    "        λNuevo32.append(i)\n",
    "        FNuevo32.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[33],FGeneral[33]):\n",
    "    if (i >= Mean32):\n",
    "        λNuevo32.append(i)\n",
    "        FNuevo32.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter33 = []\n",
    "for i in λGeneral[33]:\n",
    "    if (i >= λGeneral[34][0]):\n",
    "        λInter33.append(i)\n",
    "Mean33 = np.mean(λInter33)\n",
    "\n",
    "λNuevo33 = []\n",
    "FNuevo33 = []\n",
    "for i,j in zip(λNuevo32,FNuevo32):\n",
    "    if (i <= Mean33):\n",
    "        λNuevo33.append(i)\n",
    "        FNuevo33.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[34],FGeneral[34]):\n",
    "    if (i >= Mean33):\n",
    "        λNuevo33.append(i)\n",
    "        FNuevo33.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter34 = []\n",
    "for i in λGeneral[34]:\n",
    "    if (i >= λGeneral[35][0]):\n",
    "        λInter34.append(i)\n",
    "Mean34 = np.mean(λInter34)\n",
    "\n",
    "λNuevo34 = []\n",
    "FNuevo34 = []\n",
    "for i,j in zip(λNuevo33,FNuevo33):\n",
    "    if (i <= Mean34):\n",
    "        λNuevo34.append(i)\n",
    "        FNuevo34.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[35],FGeneral[35]):\n",
    "    if (i >= Mean34):\n",
    "        λNuevo34.append(i)\n",
    "        FNuevo34.append(j)\n",
    "    \n",
    "                ##########\n",
    "\n",
    "λInter35 = []\n",
    "for i in λGeneral[35]:\n",
    "    if (i >= λGeneral[36][0]):\n",
    "        λInter35.append(i)\n",
    "Mean35 = np.mean(λInter35)\n",
    "\n",
    "λNuevo35 = []\n",
    "FNuevo35 = []\n",
    "for i,j in zip(λNuevo34,FNuevo34):\n",
    "    if (i <= Mean35):\n",
    "        λNuevo35.append(i)\n",
    "        FNuevo35.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[36],FGeneral[36]):\n",
    "    if (i >= Mean35):\n",
    "        λNuevo35.append(i)\n",
    "        FNuevo35.append(j)\n",
    "        \n",
    "                ##########\n",
    "\n",
    "λInter36 = []\n",
    "for i in λGeneral[36]:\n",
    "    if (i >= λGeneral[37][0]):\n",
    "        λInter36.append(i)\n",
    "Mean36 = np.mean(λInter36)\n",
    "\n",
    "λNuevo36 = []\n",
    "FNuevo36 = []\n",
    "for i,j in zip(λNuevo35,FNuevo35):\n",
    "    if (i <= Mean36):\n",
    "        λNuevo36.append(i)\n",
    "        FNuevo36.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[37],FGeneral[37]):\n",
    "    if (i >= Mean36):\n",
    "        λNuevo36.append(i)\n",
    "        FNuevo36.append(j)\n",
    "\n",
    "                ##########\n",
    "\n",
    "                ##########\n",
    "\n",
    "λInter37 = []\n",
    "for i in λGeneral[37]:\n",
    "    if (i >= λGeneral[38][0]):\n",
    "        λInter37.append(i)\n",
    "Mean37 = np.mean(λInter37)\n",
    "\n",
    "λNuevo37 = []\n",
    "FNuevo37 = []\n",
    "for i,j in zip(λNuevo36,FNuevo36):\n",
    "    if (i <= Mean37):\n",
    "        λNuevo37.append(i)\n",
    "        FNuevo37.append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[38],FGeneral[38]):\n",
    "    if (i >= Mean37):\n",
    "        λNuevo37.append(i)\n",
    "        FNuevo37.append(j)\n",
    "\n",
    "                ##########\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1aa44353",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(8,7))\n",
    "plt.plot(λNuevo37,FNuevo37, '-',linewidth = 0.5, color='k') #color = colors[beging-k])\n",
    "plt.xlabel('$\\lambda~ [Å]$',fontsize = 12)\n",
    "plt.ylabel('$F_\\lambda~  [Normalizado]$' ,fontsize = 12)\n",
    "plt.title(\"Espectro\",fontsize = 14)\n",
    "plt.grid(linestyle='-', linewidth=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d112d57d",
   "metadata": {},
   "outputs": [],
   "source": [
    "TablaIspec_prueba = pd.DataFrame()\n",
    "TablaIspec_prueba['waveobs'] = λNuevo37\n",
    "TablaIspec_prueba['flux'] = FNuevo37\n",
    "#TablaIspec['err'] = ErrNuevos[-1]\n",
    "TablaIspec_prueba['err'] = [0]*len(FNuevo37)\n",
    "TablaIspec_prueba"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "c876342c",
   "metadata": {},
   "outputs": [],
   "source": [
    "TablaIspec_prueba.to_csv('Espectro_prueba1.txt', sep=\" \", quoting=csv.QUOTE_NONE, escapechar=\" \", index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "d130dbe2",
   "metadata": {},
   "outputs": [],
   "source": [
    "beging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "994a1a2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''λInter0 = []\n",
    "for i in λGeneral[0]:\n",
    "    if (i >= λGeneral[1][0]):\n",
    "        λInter0.append(i)\n",
    "Mean0 = np.mean(λInter0)\n",
    "\n",
    "\n",
    "λNuevo[0] = []\n",
    "FNuevo[0] = []\n",
    "for i,j in zip(λGeneral[0],FGeneral[0]):\n",
    "    if (i <= Mean0):\n",
    "        λNuevo[0].append(i)\n",
    "        FNuevo[0].append(j)\n",
    "            \n",
    "for i,j in zip(λGeneral[1],FGeneral[1]):\n",
    "    if (i >= Mean0):\n",
    "        λNuevo[0].append(i)\n",
    "        FNuevo[0].append(j)'''\n",
    "\n",
    "\n",
    "# λInter37 = []\n",
    "# for i in λGeneral[37]:\n",
    "#     if (i >= λGeneral[38][0]):\n",
    "#         λInter37.append(i)\n",
    "# Mean37 = np.mean(λInter37)\n",
    "\n",
    "# λNuevo37 = []\n",
    "# FNuevo37 = []\n",
    "# for i,j in zip(λNuevo36,FNuevo36):\n",
    "#     if (i <= Mean37):\n",
    "#         λNuevo37.append(i)\n",
    "#         FNuevo37.append(j)\n",
    "            \n",
    "# for i,j in zip(λGeneral[38],FGeneral[38]):\n",
    "#     if (i >= Mean37):\n",
    "#         λNuevo37.append(i)\n",
    "#         FNuevo37.append(j)\n",
    "\n",
    "#                 ##########\n",
    "\n",
    "λInter = [[] for _ in range(beging)]\n",
    "FNuevos = [[] for _ in range(beging)]\n",
    "λNuevos = [[] for _ in range(beging)]\n",
    "ErrNuevos = [[] for _ in range(beging)]\n",
    "Means = [[] for _ in range(beging)]\n",
    "\n",
    "\n",
    "for j in range(beging):\n",
    "    λInter[j] = []\n",
    "    for i in λGeneral[j]:\n",
    "        if (i >= λGeneral[j+1][0]):\n",
    "            λInter[j].append(i)\n",
    "    Means[j] = np.mean(λInter[j])\n",
    "\n",
    "    λNuevos[j] = []\n",
    "    FNuevos[j] = []\n",
    "    \n",
    "    for k,l,m in zip(λNuevos[j-1],FNuevos[j-1],ErrNuevos[j-1]):\n",
    "        if (k <= Means[j]):\n",
    "            λNuevos[j].append(k)\n",
    "            FNuevos[j].append(l)\n",
    "            ErrNuevos[j].append(m)\n",
    "            \n",
    "    for k,l,m in zip(λGeneral[j+1],FGeneral[j+1],ErrGeneral[j+1]):\n",
    "        if (k >= Means[j]):\n",
    "            λNuevos[j].append(k)\n",
    "            FNuevos[j].append(l)\n",
    "            ErrNuevos[j].append(m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "8f60f81d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# FnGeneral = [[] for _ in range(beging-1)]\n",
    "# λnGeneral = [[] for _ in range(beging-1)]\n",
    "\n",
    "# for j in range(beging-1):\n",
    "#     for i in λGeneral[j+1]:\n",
    "#         if (i >= λGeneral[j][-1]):\n",
    "#             λnGeneral[j].append(i)\n",
    "#     FnGeneral[j] = FGeneral[j+1][len(λGeneral[j+1])-len(λnGeneral[j]):]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a8f868a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(7,6))\n",
    "plt.plot(λNuevos[-1],FNuevos[-1], '-',linewidth = 0.8,color='k') #color = colors[beging-k])\n",
    "plt.xlabel('$\\lambda~ [Å]$',fontsize = 12)\n",
    "plt.ylabel('$F_\\lambda~  [Normalizado]$' ,fontsize = 12)\n",
    "plt.title(\"Espectro\",fontsize = 14)\n",
    "plt.ylim(-1,4)\n",
    "#plt.xlim(6540,6580)\n",
    "#plt.xlim(5290,5295)\n",
    "plt.grid(linestyle='-', linewidth=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "af49c632",
   "metadata": {},
   "outputs": [],
   "source": [
    "#λNuevos[-1],FNuevos[-1],ErrNuevos[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "8c850acc",
   "metadata": {},
   "outputs": [],
   "source": [
    "TablaIspec = pd.DataFrame()\n",
    "TablaIspec['waveobs'] = λNuevos[-1]\n",
    "TablaIspec['flux'] = FNuevos[-1]\n",
    "#TablaIspec['err'] = ErrNuevos[-1]\n",
    "TablaIspec['err'] = [0]*len(FNuevos[-1])\n",
    "TablaIspec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "72a91a0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "TablaIspec.to_csv('Err_0_Espectro_HD55496.txt', sep=\" \", quoting=csv.QUOTE_NONE, escapechar=\" \", index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "5e8f4fc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def Extraccion_Espectros(x, nombre):\n",
    "    print(x)\n",
    "    %matplotlib inline\n",
    "    srich = fits.open(x) #open file\n",
    "    tabla = srich[0].data\n",
    "    Wavelength = pd.DataFrame(tabla[0])\n",
    "    Flux = pd.DataFrame(tabla[5])\n",
    "    Error = pd.DataFrame(tabla[6])\n",
    "    \n",
    "    F = []\n",
    "    λ = []\n",
    "    Err = []\n",
    "\n",
    "    for j in range(38,-1,-1):\n",
    "        for i in range(2048):\n",
    "            λ.append(Wavelength[i][j])\n",
    "            F.append(Flux[i][j])\n",
    "            Err.append(Error[i][j])\n",
    "            \n",
    "    Tabla = pd.DataFrame()\n",
    "    Tabla['Wavelength'] = λ\n",
    "    Tabla['Norm Flux'] = F\n",
    "    Tabla['Err Norm Flux'] = Err\n",
    "\n",
    "    beging = 38\n",
    "\n",
    "    FGeneral = [[] for _ in range(beging+1)]\n",
    "    λGeneral = [[] for _ in range(beging+1)]\n",
    "    \n",
    "    \n",
    "    for i in range(2048):\n",
    "        for j in range(beging):\n",
    "            FGeneral[j].append(Flux[i][beging-j])\n",
    "            λGeneral[j].append(Wavelength[i][beging-j])\n",
    "    \n",
    "            FGeneral[38].append(Flux[i][0])\n",
    "            λGeneral[38].append(Wavelength[i][0])\n",
    "    \n",
    "    \n",
    "    # Graficando el espectro original\n",
    "    cmap = plt.get_cmap('Spectral')\n",
    "    colors = [cmap(i) for i in np.linspace(0, 1, 39)]\n",
    "    plt.figure(figsize=(8,7))\n",
    "\n",
    "    for k in range(39):\n",
    "        plt.plot(λGeneral[k],FGeneral[k], '-',linewidth = 1) #color = colors[beging-k])\n",
    "\n",
    "    plt.xlabel('$\\lambda~ [Å]$',fontsize = 12)\n",
    "    plt.ylabel('$F_\\lambda~  [Normalizado]$' ,fontsize = 12)\n",
    "    plt.title(nombre,fontsize = 14)\n",
    "    plt.grid(linestyle='-', linewidth=0.2)\n",
    "    \n",
    "    \n",
    "    # Filtrando el espectro por medio del valor medio entre cada fila de frecuencias\n",
    "\n",
    " ####\n",
    "    λInter = [[] for _ in range(beging)]\n",
    "    FNuevos = [[] for _ in range(beging)]\n",
    "    λNuevos = [[] for _ in range(beging)]\n",
    "    Means = [[] for _ in range(beging)]\n",
    "    \n",
    "    \n",
    "    for j in range(beging):\n",
    "        λInter[j] = []\n",
    "        for i in λGeneral[j]:\n",
    "            if (i >= λGeneral[j+1][0]):\n",
    "                λInter[j].append(i)\n",
    "        Means[j] = np.mean(λInter[j])\n",
    "    \n",
    "        λNuevos[j] = []\n",
    "        FNuevos[j] = []\n",
    "        \n",
    "        for k,l in zip(λNuevos[j-1],FNuevos[j-1]):\n",
    "            if (k <= Means[j]):\n",
    "                λNuevos[j].append(k)\n",
    "                FNuevos[j].append(l)\n",
    "                \n",
    "        for k,l in zip(λGeneral[j+1],FGeneral[j+1]):\n",
    "            if (k >= Means[j]):\n",
    "                λNuevos[j].append(k)\n",
    "                FNuevos[j].append(l)\n",
    "###\n",
    "                \n",
    "    FnGeneral = [[] for _ in range(beging-1)]\n",
    "    λnGeneral = [[] for _ in range(beging-1)]\n",
    "\n",
    "    for j in range(beging-1):\n",
    "        for i in λGeneral[j+1]:\n",
    "            if (i >= λGeneral[j][-1]):\n",
    "                λnGeneral[j].append(i)\n",
    "        FnGeneral[j] = FGeneral[j+1][len(λGeneral[j+1])-len(λnGeneral[j]):]\n",
    "        \n",
    "    plt.figure(figsize=(8,7))\n",
    "    plt.plot(λNuevos[-1],FNuevos[-1], '-',linewidth = 0.8,color='k') #color = colors[beging-k])\n",
    "    plt.xlabel('$\\lambda~ [Å]$',fontsize = 12)\n",
    "    plt.ylabel('$F_\\lambda~  [Normalizado]$' ,fontsize = 12)\n",
    "    plt.title(nombre,fontsize = 14)\n",
    "    #plt.ylim(-1,7)\n",
    "    #plt.xlim(6540,6580)\n",
    "    #plt.xlim(5290,5295)\n",
    "\n",
    "    #Línea de Hα\n",
    "    #plt.xlim(6540,6580)\n",
    "    #plt.ylim(-0.05,2.5)\n",
    "\n",
    "    plt.grid(linestyle='-', linewidth=0.2)\n",
    "    \n",
    "    TablaIspec = pd.DataFrame()\n",
    "    TablaIspec['waveobs'] = λNuevos[-1]\n",
    "    TablaIspec['flux'] = FNuevos[-1]\n",
    "    \n",
    "    # Para el cálculo del error, hay dos métodos que se pueden implementar: \n",
    "        # 1. Es utilizar el modelo de Poisson pixel a pixel [√#cuentas]\n",
    "        # 2. Darle incertidumbre constante con la varianza media\n",
    "    TablaIspec['err'] = np.var(FNuevos[-1])#np.sqrt(FNuevos[-1])    #   #[0]*len(FNuevos[-1])\n",
    "    print(TablaIspec)\n",
    "\n",
    "    globals()[\"Lon_\"+nombre] =  λNuevos[-1]\n",
    "    globals()[\"Flu_\"+nombre] =  FNuevos[-1]\n",
    "    \n",
    "    flux = FNuevos[-1]*u.Jy\n",
    "    wavelength = λNuevos[-1]*u.AA\n",
    "    spec1d = Spectrum1D(spectral_axis=wavelength, flux=flux)\n",
    "    spec1d.write(nombre+\".fits\", overwrite=True)  \n",
    "    \n",
    "    TablaIspec.to_csv(nombre+\".txt\", sep=\" \", quoting=csv.QUOTE_NONE, escapechar=\" \", index = False)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "f03a8d00",
   "metadata": {},
   "outputs": [],
   "source": [
    "Extraccion_Espectros(Espectros[0], nombre = 'Espectro_1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "40962e93",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ax = plt.subplots()[1]  \n",
    "# ax.plot(spec1d.spectral_axis, spec1d.flux)  \n",
    "# ax.set_xlabel(\"Dispersion\")  \n",
    "# ax.set_ylabel(\"Flux\")  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "c8913172",
   "metadata": {},
   "outputs": [],
   "source": [
    "Espectro_prueba = fits.open('Espectro_2.fits') #open file\n",
    "imagen = Espectro_prueba[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d513078b",
   "metadata": {},
   "outputs": [],
   "source": [
    "Espectro_prueba.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "e80537f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from astropy.io import fits as pyfits\n",
    "import numpy as np\n",
    "import scipy as sc\n",
    "import sys\n",
    "\n",
    "images2=pyfits.open('Espectro_2.fits')\n",
    "\n",
    "str(images2[1].data[0][1]) # Air "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "83ed9074",
   "metadata": {},
   "outputs": [],
   "source": [
    "Extraccion_Espectros(Espectros[1], nombre = 'Espectro_2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "337640c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "Extraccion_Espectros(Espectros[2], nombre = 'Espectro_3')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "827f59ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "Extraccion_Espectros(Espectros[3], nombre = 'Espectro_4')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7c5b5382",
   "metadata": {},
   "outputs": [],
   "source": [
    "Extraccion_Espectros(Espectros[4], nombre = 'Espectro_5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "769e8699",
   "metadata": {},
   "outputs": [],
   "source": [
    "Extraccion_Espectros(Espectros[5], nombre = 'Espectro_6')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "62e4d4c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "Extraccion_Espectros(Espectros[6], nombre = 'Espectro_7')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "39d6a79c",
   "metadata": {},
   "outputs": [],
   "source": [
    "Extraccion_Espectros(Espectros[7], nombre = 'Espectro_8')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "faeb0fdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.8)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de FIDEOS')\n",
    "\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "500097b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.8)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de FIDEOS')\n",
    "\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "fbd9a923",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 7\n",
    "longitud_de_onda = [Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.8)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de FIDEOS')\n",
    "\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "0f4a1590",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.8)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de FIDEOS')\n",
    "\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c96470bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "c49a5aa3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.ylim(6000,6450)\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "8c9a25fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6000,6450)\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "ebe52582",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6540,6580)\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "cc783f33",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6570,6580)\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "64ba74c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6540,6580)\n",
    "ax.ser_zlim(0,1.75)\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "535985e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6540,6580)\n",
    "ax.set_zlim(0,1.75)\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "1f320aac",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6540,6580)\n",
    "ax.set_zlim(0,1.75)\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "fafda98e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.view_init(elev=20, azim=30)\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6540,6580)\n",
    "ax.set_zlim(0,1.75)\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "b22cab61",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.view_init(elev=20, azim=30)\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6540,6580)\n",
    "ax.set_zlim(0,1.75)\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth}=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "26bbde6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.view_init(elev=20, azim=30)\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6540,6580)\n",
    "ax.set_zlim(0,1.75)\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth}=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "d270ed76",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.view_init(elev=20, azim=30)\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6540,6580)\n",
    "ax.set_zlim(0,1.75)\n",
    "# Mostrar el gráfico\n",
    "plt.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "de0d0867",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.view_init(elev=20, azim=30)\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6540,6580)\n",
    "ax.set_zlim(0,1.75)\n",
    "# Mostrar el gráfico\n",
    "ax.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "af849cbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.view_init(elev=20, azim=10)\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6540,6580)\n",
    "ax.set_zlim(0,1.75)\n",
    "# Mostrar el gráfico\n",
    "ax.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "901d0ca4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.view_init(elev=20, azim=-10)\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6540,6580)\n",
    "ax.set_zlim(0,1.75)\n",
    "# Mostrar el gráfico\n",
    "ax.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "2b90155a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.view_init(elev=20, azim=-10)\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6550,6580)\n",
    "ax.set_zlim(0,1.75)\n",
    "# Mostrar el gráfico\n",
    "ax.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "6a789e24",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "# Datos de ejemplo para longitud de onda y flujo para 8 paquetes de datos\n",
    "paquetes_de_datos = 8\n",
    "longitud_de_onda = [Lon_Espectro_1,Lon_Espectro_2,Lon_Espectro_3,Lon_Espectro_4,Lon_Espectro_5,Lon_Espectro_6,Lon_Espectro_7,Lon_Espectro_8]\n",
    "flujo = [Flu_Espectro_1,Flu_Espectro_2,Flu_Espectro_3,Flu_Espectro_4,Flu_Espectro_5,Flu_Espectro_6,Flu_Espectro_7,Flu_Espectro_8]\n",
    "\n",
    "# Crear la figura, y el eje 3D\n",
    "fig = plt.figure(figsize=(10, 10))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "# Forma de llamar colores, de la paleta de colores\n",
    "cmap = plt.get_cmap('inferno')\n",
    "colors = [cmap(i) for i in np.linspace(0, 1, 9)]\n",
    "\n",
    "# Iterar sobre cada paquete de datos y graficar\n",
    "for i in range(paquetes_de_datos):\n",
    "    ax.plot(longitud_de_onda[i],flujo[i], zs=i+1, zdir='x', color=colors[i], linestyle='-',linewidth=0.5)\n",
    "\n",
    "# Etiquetas y título\n",
    "ax.view_init(elev=50, azim=-10)\n",
    "ax.set_xlabel('Espectros', fontsize = 12)\n",
    "ax.set_ylabel('$\\lambda [Å]$',fontsize = 12)\n",
    "ax.set_zlabel('Flujo')\n",
    "ax.set_title('8 Espectros de HD 55496')\n",
    "ax.set_ylim(6550,6580)\n",
    "ax.set_zlim(0,1.75)\n",
    "# Mostrar el gráfico\n",
    "ax.grid(linestyle='-', linewidth=0.2)\n",
    "plt.show"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
